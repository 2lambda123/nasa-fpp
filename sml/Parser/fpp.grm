(* ----------------------------------------------------------------------
 * fpp.grm
 * ----------------------------------------------------------------------*) 

open Ast
open AstNode
open Loc

fun pos1 node = 
  let val Loc {pos1,...} = Locations.lookup node
  in pos1 end

fun pos2 node = 
  let val Loc {pos2,...} = Locations.lookup node
  in pos2 end

fun node (e, pos1, pos2) =
let
  val node = AstNode.node e
in
  Locations.insert (node, Loc {
    file=(!ParserState.file),
    pos1=pos1,
    pos2=pos2
  });
  node
end

%%

%pos int

%eop EOF

%term 
  ASSIGN
| COLON
| COMMA
| CONSTANT
| DOT
| ENUM
| EOF
| EOL
| F32
| F64
| I16
| I32
| I64
| I8
| IDENT of string
| LBRACE
| LBRACKET
| LITERAL_FLOAT of string
| LITERAL_INT of string
| LPAREN
| MINUS
| MODULE
| PLUS
| POST_ANNOTATION of string
| PRE_ANNOTATION of string
| RBRACE
| RBRACKET
| RPAREN
| SEMI
| TYPE
| U16
| U32
| U64
| U8

%nonterm 
  START of trans_unit
| COMMA_OR_EOL of unit
| DEF_CONSTANT of def_constant
| DEF_CONSTANT_NODE of def_constant node
| DEF_ENUM of def_enum
| DEF_ENUM_NODE of def_enum node
| DEF_MODULE of def_module
| DEF_MODULE_NODE of def_module node
| ENUMERATOR of enumerator
| ENUMERATOR_NODE of enumerator node
| ENUMERATOR_NODE_ANNOTATED of enumerator node annotated
| ENUMERATOR_NODE_ANNOTATED_LIST of enumerator node annotated list
| EOL_LBRACE_EOL of unit
| EXPR of expr
| EXPR_ATOMIC of expr
| EXPR_ATOMIC_NODE of expr node
| EXPR_NODE of expr node
| EXPR_UNOP of expr
| EXPR_UNOP_NODE of expr node
| LAST_ENUMERATOR of enumerator
| LAST_ENUMERATOR_NODE of enumerator node
| LAST_ENUMERATOR_NODE_ANNOTATED of enumerator node annotated
| LAST_TU_MEMBER of tu_member
| LAST_TU_MEMBER_NODE of tu_member_node
| POST_ANNOTATION_LIST of string list
| PRE_ANNOTATION_LIST of string list
| SEMI_OR_EOL of unit
| TRANS_UNIT of trans_unit
| TU_MEMBER of tu_member
| TU_MEMBER_LIST of tu_member list
| TU_MEMBER_NODE of tu_member_node
| TYPE_NAME of type_name
| TYPE_NAME_FLOAT of type_name
| TYPE_NAME_INT of type_name
| TYPE_NAME_NODE of type_name node

%name TNet

%noshift EOF
%nodefault
%%

START 
  : TRANS_UNIT (TRANS_UNIT)

COMMA_OR_EOL
  : COMMA (())
  | EOL (())

DEF_CONSTANT
  : CONSTANT IDENT ASSIGN EXPR_NODE (DefConstant (IDENT, EXPR_NODE))

DEF_CONSTANT_NODE
  : DEF_CONSTANT (node (DEF_CONSTANT, DEF_CONSTANTleft, DEF_CONSTANTright))

DEF_ENUM
  : ENUM IDENT LBRACE RBRACE (
      DefEnum (IDENT, NONE, [])
    )
  | ENUM IDENT LBRACE ENUMERATOR_NODE_ANNOTATED_LIST RBRACE (
      DefEnum (IDENT, NONE, ENUMERATOR_NODE_ANNOTATED_LIST)
    )
  | ENUM IDENT COLON TYPE_NAME_NODE LBRACE ENUMERATOR_NODE_ANNOTATED_LIST RBRACE (
      DefEnum (IDENT, SOME TYPE_NAME_NODE, ENUMERATOR_NODE_ANNOTATED_LIST)
    )
  | ENUM IDENT COLON TYPE_NAME_NODE LBRACE RBRACE (
      DefEnum (IDENT, SOME TYPE_NAME_NODE, [])
    )

DEF_ENUM_NODE
  : DEF_ENUM (node (DEF_ENUM, DEF_ENUMleft, DEF_ENUMright))

DEF_MODULE
  : MODULE IDENT LBRACE RBRACE (DefModule (IDENT, []))
  | MODULE IDENT LBRACE TU_MEMBER_LIST RBRACE (
      DefModule (IDENT, TU_MEMBER_LIST)
    )

DEF_MODULE_NODE
  : DEF_MODULE (node (DEF_MODULE, DEF_MODULEleft, DEF_MODULEright))

ENUMERATOR
  : LAST_ENUMERATOR COMMA_OR_EOL (LAST_ENUMERATOR)

ENUMERATOR_NODE
  : ENUMERATOR (node (ENUMERATOR, ENUMERATORleft, ENUMERATORright))

ENUMERATOR_NODE_ANNOTATED
  : ENUMERATOR_NODE (([], ENUMERATOR_NODE, [])) 
  | PRE_ANNOTATION_LIST ENUMERATOR_NODE (
      (PRE_ANNOTATION_LIST, ENUMERATOR_NODE, [])
    ) 
  | ENUMERATOR_NODE POST_ANNOTATION_LIST (
      ([], ENUMERATOR_NODE, POST_ANNOTATION_LIST)
    ) 
  | LAST_ENUMERATOR_NODE POST_ANNOTATION_LIST (
      ([], LAST_ENUMERATOR_NODE, POST_ANNOTATION_LIST)
    ) 
  | PRE_ANNOTATION_LIST ENUMERATOR_NODE POST_ANNOTATION_LIST (
      (PRE_ANNOTATION_LIST, ENUMERATOR_NODE, POST_ANNOTATION_LIST)
    ) 

ENUMERATOR_NODE_ANNOTATED_LIST
  : LAST_ENUMERATOR_NODE_ANNOTATED ([ LAST_ENUMERATOR_NODE_ANNOTATED ])
  | ENUMERATOR_NODE_ANNOTATED ([ ENUMERATOR_NODE_ANNOTATED ])
  | ENUMERATOR_NODE_ANNOTATED ENUMERATOR_NODE_ANNOTATED_LIST (
      ENUMERATOR_NODE_ANNOTATED :: ENUMERATOR_NODE_ANNOTATED_LIST
    )

EXPR
  : EXPR_UNOP (EXPR_UNOP)

EXPR_ATOMIC
  : IDENT (ExprIdent IDENT)
  | LITERAL_FLOAT (ExprLiteral (LiteralFloat, LITERAL_FLOAT))
  | LITERAL_INT (ExprLiteral (LiteralInt, LITERAL_INT))

EXPR_NODE
  : EXPR (node (EXPR, EXPRleft, EXPRright))

EXPR_UNOP
  : EXPR_ATOMIC (EXPR_ATOMIC)
  | MINUS EXPR_UNOP_NODE (ExprUnop (Minus, EXPR_UNOP_NODE))

EXPR_UNOP_NODE
  : EXPR_UNOP (node (EXPR_UNOP, EXPR_UNOPleft, EXPR_UNOPright))

LAST_ENUMERATOR
  : IDENT ASSIGN EXPR_NODE (Enumerator (IDENT, SOME EXPR_NODE))
  | IDENT (Enumerator (IDENT, NONE))

LAST_ENUMERATOR_NODE
  : LAST_ENUMERATOR (node (LAST_ENUMERATOR, LAST_ENUMERATORleft, LAST_ENUMERATORright))

LAST_ENUMERATOR_NODE_ANNOTATED
  : LAST_ENUMERATOR_NODE (([], LAST_ENUMERATOR_NODE, [])) 
  | PRE_ANNOTATION_LIST LAST_ENUMERATOR_NODE (
      (PRE_ANNOTATION_LIST, LAST_ENUMERATOR_NODE, [])
    ) 
  | PRE_ANNOTATION_LIST LAST_ENUMERATOR_NODE POST_ANNOTATION_LIST (
      (PRE_ANNOTATION_LIST, LAST_ENUMERATOR_NODE, POST_ANNOTATION_LIST)
    ) 

LAST_TU_MEMBER
  : LAST_TU_MEMBER_NODE (TUMember ([], LAST_TU_MEMBER_NODE, []))
  | PRE_ANNOTATION_LIST LAST_TU_MEMBER_NODE (
      TUMember (PRE_ANNOTATION_LIST, LAST_TU_MEMBER_NODE, [])
    ) 

LAST_TU_MEMBER_NODE
  : DEF_CONSTANT_NODE (TUDefConstant DEF_CONSTANT_NODE)
  | DEF_ENUM_NODE (TUDefEnum DEF_ENUM_NODE)
  | DEF_MODULE_NODE (TUDefModule DEF_MODULE_NODE)

POST_ANNOTATION_LIST
  : POST_ANNOTATION ([ POST_ANNOTATION ])
  | POST_ANNOTATION POST_ANNOTATION_LIST (POST_ANNOTATION :: POST_ANNOTATION_LIST)

PRE_ANNOTATION_LIST
  : PRE_ANNOTATION ([ PRE_ANNOTATION ])
  | PRE_ANNOTATION PRE_ANNOTATION_LIST (PRE_ANNOTATION :: PRE_ANNOTATION_LIST)

SEMI_OR_EOL
  : SEMI (())
  | EOL (())

TRANS_UNIT
  : (TransUnit [])
  | TU_MEMBER_LIST (TransUnit TU_MEMBER_LIST)
  | EOL TRANS_UNIT (TRANS_UNIT)

TU_MEMBER
  : TU_MEMBER_NODE (TUMember ([], TU_MEMBER_NODE, [])) 
  | PRE_ANNOTATION_LIST TU_MEMBER_NODE (
      TUMember (PRE_ANNOTATION_LIST, TU_MEMBER_NODE, [])
    ) 
  | TU_MEMBER_NODE POST_ANNOTATION_LIST (
      TUMember ([], TU_MEMBER_NODE, POST_ANNOTATION_LIST)
    ) 
  | LAST_TU_MEMBER_NODE POST_ANNOTATION_LIST (
      TUMember ([], LAST_TU_MEMBER_NODE, POST_ANNOTATION_LIST)
    ) 
  | PRE_ANNOTATION_LIST TU_MEMBER_NODE POST_ANNOTATION_LIST (
      TUMember (PRE_ANNOTATION_LIST, TU_MEMBER_NODE, POST_ANNOTATION_LIST)
    ) 
  | PRE_ANNOTATION_LIST LAST_TU_MEMBER_NODE POST_ANNOTATION_LIST (
      TUMember (PRE_ANNOTATION_LIST, LAST_TU_MEMBER_NODE, POST_ANNOTATION_LIST)
    ) 

TU_MEMBER_LIST
  : LAST_TU_MEMBER ([ LAST_TU_MEMBER ])
  | TU_MEMBER ([ TU_MEMBER ])
  | TU_MEMBER TU_MEMBER_LIST (TU_MEMBER :: TU_MEMBER_LIST)

TU_MEMBER_NODE
  : LAST_TU_MEMBER_NODE SEMI_OR_EOL (LAST_TU_MEMBER_NODE)

TYPE_NAME
  : TYPE_NAME_FLOAT (TYPE_NAME_FLOAT)
  | TYPE_NAME_INT (TYPE_NAME_INT)

TYPE_NAME_FLOAT
  : F32 (TypeNameFloat F32)
  | F64 (TypeNameFloat F64)

TYPE_NAME_INT
  : I8 (TypeNameInt I8)
  | I16 (TypeNameInt I16)
  | I32 (TypeNameInt I32)
  | I64 (TypeNameInt I64)
  | U8 (TypeNameInt U8)
  | U16 (TypeNameInt U16)
  | U32 (TypeNameInt U32)
  | U64 (TypeNameInt U64)

TYPE_NAME_NODE
  : TYPE_NAME (node (TYPE_NAME, TYPE_NAMEleft, TYPE_NAMEright))

