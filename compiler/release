#!/bin/sh -e

# ----------------------------------------------------------------------
# FPP release builder
# ----------------------------------------------------------------------
# To use this script, you must first
#
# 1. Install GraalVM and native-image.
#
# 2. Set the environment variable GRAALVM_JAVA_HOME.
#
# See README.adoc.
# ----------------------------------------------------------------------

# Print and evaluate
evalp()
{
  echo "$@"
  $@
}

# Get tool names from a directory
get_tool_names()
{
  dir=$1
  for file in $dir/*.jar
  do
    basename $file .jar
  done
}

# Check that GRAALVM_JAVA_HOME is set
if test -z "$GRAALVM_JAVA_HOME"
then
  echo "release: environment variable GRAALVM_JAVA_HOME is not set" 1>&2
  exit 1
fi

# Run in the directory where this script is located
cd `dirname $0`

# Set local variables
native_bin="native-fpp-`uname`-`uname -m`"
java=$GRAALVM_JAVA_HOME/bin/java
native_image="$GRAALVM_JAVA_HOME/bin/native-image"
meta_inf_dir="lib/src/main/resources/META-INF/native-image/"

# Make directories
mkdir -p "$meta_inf_dir"
mkdir -p "$native_bin"

# Versioning information
echo "C compiler version"
cc --version
echo "Java version"
$java --version
echo "Native Image Version"
$native_image --version

# Install jar files in bin
./install-trace

# Get the tool names from bin
tool_names=`get_tool_names bin`

# Run unit tests and capture the GraalVM trace
./test
if [ $? -ne 0 ]
then
    # Check that unit tests passed
    echo "[ERROR] JVM unit tests failed"
    exit 1
fi
sync; sync; sync;

# Use GraalVM to convert jar files to binaries
for jar_file in bin/*.jar
do
    out_file=$native_bin/`basename $jar_file .jar`
    echo "Building $out_file"
    evalp "$native_image" --configure-reflection-metadata --no-fallback \
      --install-exit-handlers -jar "$jar_file" "$out_file"
    if [ $? -ne 0 ]
    then
        echo "release: Failed to build $out_file"
        exit 1
    fi
    sync; sync; sync;
    if ! $out_file --help 1>/dev/null
    then
        echo "release: Failed, $out_file not executable"
        exit 1
    fi
done
sync; sync; sync;

# Clean up native directory
rm -f "$native_bin"/*.txt "$native_bin"/*.o
sync; sync; sync;

# Test the native binaries
evalp rm -r "bin"
evalp cp -r "$native_bin" "bin"
./test
if [ $? -ne 0 ]
then
    echo "[ERROR] Native unit tests failed"
    exit 1
fi

# Create the tar ball
release_tgz="$native_bin.tar.gz"
evalp tar -czf "$release_tgz" "$native_bin"
sync; sync; sync;

# Verify the tar ball
mkdir -p check-tar
(cd check-tar; evalp tar -xvf "../$release_tgz")
sync; sync; sync;
for file in `ls "$native_bin"`
do
  if ! evalp diff -q "$native_bin/$file check-tar/$native_bin/$file"
  then
    echo "[ERROR] Archive creation failed"
    exit 1
  fi
done

# Print status
echo "Release archive written to $release_tgz with size `du -hs $release_tgz`"
