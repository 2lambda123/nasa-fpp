// ======================================================================
// \title  DpTest_DataSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpTest_Data struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "DpTest_DataSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

namespace FppTest {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  DpTest_Data ::
    DpTest_Data() :
      Serializable(),
      u16Field(0)
  {

  }

  DpTest_Data ::
    DpTest_Data(U16 u16Field) :
      Serializable(),
      u16Field(u16Field)
  {

  }

  DpTest_Data ::
    DpTest_Data(const DpTest_Data& obj) :
      Serializable(),
      u16Field(obj.u16Field)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  DpTest_Data& DpTest_Data ::
    operator=(const DpTest_Data& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.u16Field);
    return *this;
  }

  bool DpTest_Data ::
    operator==(const DpTest_Data& obj) const
  {
    return (this->u16Field == obj.u16Field);
  }

  bool DpTest_Data ::
    operator!=(const DpTest_Data& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const DpTest_Data& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus DpTest_Data ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->u16Field);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus DpTest_Data ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->u16Field);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

  void DpTest_Data ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "u16Field = %" PRIu16 ""
      " )";

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      this->u16Field
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void DpTest_Data ::
    set(U16 u16Field)
  {
    this->u16Field = u16Field;
  }

  void DpTest_Data ::
    setu16Field(U16 u16Field)
  {
    this->u16Field = u16Field;
  }

}
