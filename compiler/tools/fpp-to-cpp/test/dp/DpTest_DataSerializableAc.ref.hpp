// ======================================================================
// \title  DpTest_DataSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpTest_Data struct
// ======================================================================

#ifndef FppTest_DpTest_DpTest_DataSerializableAc_HPP
#define FppTest_DpTest_DpTest_DataSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace FppTest {

  //! Data for a DataRecord
  class DpTest_Data :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          sizeof(U16)
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      DpTest_Data();

      //! Member constructor
      DpTest_Data(U16 u16Field);

      //! Copy constructor
      DpTest_Data(
          const DpTest_Data& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      DpTest_Data& operator=(
          const DpTest_Data& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const DpTest_Data& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const DpTest_Data& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const DpTest_Data& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member u16Field
      U16 getu16Field() const
      {
        return this->u16Field;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(U16 u16Field);

      //! Set member u16Field
      void setu16Field(U16 u16Field);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      U16 u16Field;

  };

}

#endif
