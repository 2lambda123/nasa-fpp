// ======================================================================
// \title  Modules1SerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Modules1 struct
// ======================================================================

#ifndef M_Modules1SerializableAc_HPP
#define M_Modules1SerializableAc_HPP

#include "Fw/Types/BasicTypes.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace M {

  class Modules1 :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          sizeof(U32) +
          sizeof(F32)
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      Modules1();

      //! Member constructor
      Modules1(
          U32 x,
          F32 y
      );

      //! Copy constructor
      Modules1(
          const Modules1& obj //!< The source object
      );

      //! Copy assignment operator
      Modules1& operator=(
          const Modules1& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const Modules1& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const Modules1& obj //!< The other object
      ) const;

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const Modules1& obj //!< The object
      );

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member x
      U32 getx() const;

      //! Get member y
      F32 gety() const;

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          U32 x,
          F32 y
      );

      //! Set member x
      void setx(U32 x);

      //! Set member y
      void sety(F32 y);

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      U32 x;
      F32 y;

  };

}

#endif
