// ======================================================================
// \title  EmptySerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Empty struct
// ======================================================================

#ifndef EmptySerializableAc_HPP
#define EmptySerializableAc_HPP

#include "Fw/Types/BasicTypes.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

class Empty :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =

    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Empty();

    //! Member constructor
    Empty();

    //! Copy constructor
    Empty(
        const Empty& obj //!< The source object
    );

    //! Copy assignment operator
    Empty& operator=(
        const Empty& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Empty& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Empty& obj //!< The other object
    ) const;

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all values
    void set();

  private:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

};

#endif
