// ======================================================================
// \title  DefaultSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Default struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "DefaultSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

// ----------------------------------------------------------------------
// StringSize40 class
// ----------------------------------------------------------------------

Default::StringSize40 ::
  StringSize40() :
    StringBase()
{
  this->m_buf[0] = 0;
}

Default::StringSize40 ::
  StringSize40(const char* src) :
    StringBase()
{
  Fw::StringUtils::string_copy(this->m_buf, src, sizeof(this->m_buf));
}

Default::StringSize40 ::
  StringSize40(const Fw::StringBase& src) :
    StringBase()
{
  Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
}

Default::StringSize40 ::
  StringSize40(const StringSize40& src) :
    StringBase()
{
  Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
}

Default::StringSize40 ::
  ~StringSize40()
{

}

Default::StringSize40& Default::StringSize40 ::
  operator=(const StringSize40& other)
{
  if (this == &other) {
    return *this;
  }

  Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
  return *this;
}

Default::StringSize40& Default::StringSize40 ::
  operator=(const Fw::StringBase& other)
{
  if (this == &other) {
    return *this;
  }

  Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
  return *this;
}

Default::StringSize40& Default::StringSize40 ::
  operator=(const char* other)
{
  Fw::StringUtils::string_copy(this->m_buf, other, sizeof(this->m_buf));
  return *this;
}

const char* Default::StringSize40 ::
  toChar() const
{
  return this->m_buf;
}

NATIVE_UINT_TYPE Default::StringSize40 ::
  getCapacity() const
{
  return sizeof(this->m_buf);
}

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Default ::
  Default() :
    Serializable(),
    m_var_U32(54),
    m_S1("hello"),
    m_var_F64(0.0)
{

}

Default ::
  Default(
      U32 var_U32,
      const StringSize40& S1,
      F64 var_F64
  ) :
    Serializable(),
    m_var_U32(var_U32),
    m_S1(S1),
    m_var_F64(var_F64)
{

}

Default ::
  Default(const Default& obj) :
    Serializable(),
    m_var_U32(obj.m_var_U32),
    m_S1(obj.m_S1),
    m_var_F64(obj.m_var_F64)
{

}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

Default& Default ::
  operator=(const Default& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_var_U32, obj.m_S1, obj.m_var_F64);
  return *this;
}

bool Default ::
  operator==(const Default& obj) const
{
  return (
    (this->m_var_U32 == obj.m_var_U32) &&
    (this->m_S1 == obj.m_S1) &&
    (this->m_var_F64 == obj.m_var_F64)
  );
}

bool Default ::
  operator!=(const Default& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const Default& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Default ::
  serialize(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serialize(this->m_var_U32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_S1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_var_F64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus Default ::
  deserialize(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserialize(this->m_var_U32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_S1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_var_F64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

#if FW_SERIALIZABLE_TO_STRING

void Default ::
  toString(Fw::StringBase& sb) const
{
  static const char* formatString =
    "( "
    "m_var_U32 = %" PRIu32 ", "
    "m_S1 = %s, "
    "m_var_F64 = %f"
    " )";

  char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
  (void) snprintf(
    outputString,
    FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
    formatString,
    this->m_var_U32,
    this->m_S1.toChar(),
    this->m_var_F64
  );

  outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
  sb = outputString;
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Default ::
  set(
      U32 var_U32,
      const StringSize40& S1,
      F64 var_F64
  )
{
  this->m_var_U32 = var_U32;
  this->m_S1 = S1;
  this->m_var_F64 = var_F64;
}

void Default ::
  setvar_U32(U32 var_U32)
{
  this->m_var_U32 = var_U32;
}

void Default ::
  setS1(const StringSize40& S1)
{
  this->m_S1 = S1;
}

void Default ::
  setvar_F64(F64 var_F64)
{
  this->m_var_F64 = var_F64;
}
