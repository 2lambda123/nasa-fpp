// ======================================================================
// \title  PrimitiveSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Primitive struct
// ======================================================================

#ifndef PrimitiveSerializableAc_HPP
#define PrimitiveSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

//! Top-level annotation, line 1
//! Top-level annotation, line 2
class Primitive :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // StringSize80 class
    // ----------------------------------------------------------------------

    class StringSize80 :
      public Fw::StringBase
    {

      public:

        enum {
          //! The size of the string length plus the size of the string buffer
          SERIALIZED_SIZE = sizeof(FwBuffSizeType) + 80
        };

        //! Default constructor
        StringSize80();

        //! Char array constructor
        StringSize80(const char* src);

        //! String base constructor
        StringSize80(const Fw::StringBase& src);

        //! Copy constructor
        StringSize80(const StringSize80& src);

        //! Destructor
        ~StringSize80();

        //! Copy assignment operator
        StringSize80& operator=(const StringSize80& other);

        //! String base assignment operator
        StringSize80& operator=(const Fw::StringBase& other);

        //! char* assignment operator
        StringSize80& operator=(const char* other);

        //! Retrieves char buffer of string
        const char* toChar() const;

        NATIVE_UINT_TYPE getCapacity() const;

      private:

        char m_buf[80]; //!< Buffer for string storage

    };

  public:

    // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    //! The array member types
    typedef F32 Type_of_var_F32[3];

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(F32) * 3 +
        sizeof(F64) +
        sizeof(I16) +
        sizeof(I32) +
        sizeof(I64) +
        sizeof(I8) +
        sizeof(U16) +
        sizeof(U32) +
        sizeof(U64) +
        sizeof(U8) +
        sizeof(U8) +
        StringSize80::SERIALIZED_SIZE
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Primitive();

    //! Member constructor
    Primitive(
        const Type_of_var_F32& var_F32,
        F64 var_F64,
        I16 var_I16,
        I32 var_I32,
        I64 var_I64,
        I8 var_I8,
        U16 var_U16,
        U32 var_U32,
        U64 var_U64,
        U8 var_U8,
        bool var_bool,
        const StringSize80& var_string
    );

    //! Copy constructor
    Primitive(
        const Primitive& obj //!< The source object
    );

    //! Member constructor (scalar values for arrays)
    Primitive(
        F32 var_F32,
        F64 var_F64,
        I16 var_I16,
        I32 var_I32,
        I64 var_I64,
        I8 var_I8,
        U16 var_U16,
        U32 var_U32,
        U64 var_U64,
        U8 var_U8,
        bool var_bool,
        const StringSize80& var_string
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    Primitive& operator=(
        const Primitive& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Primitive& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Primitive& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const Primitive& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member var_F32
    Type_of_var_F32& getvar_F32()
    {
      return this->m_var_F32;
    }

    //! Get member var_F32 (const)
    const Type_of_var_F32& getvar_F32() const
    {
      return this->m_var_F32;
    }

    //! Get member var_F64
    F64 getvar_F64() const
    {
      return this->m_var_F64;
    }

    //! Get member var_I16
    I16 getvar_I16() const
    {
      return this->m_var_I16;
    }

    //! Get member var_I32
    I32 getvar_I32() const
    {
      return this->m_var_I32;
    }

    //! Get member var_I64
    I64 getvar_I64() const
    {
      return this->m_var_I64;
    }

    //! Get member var_I8
    I8 getvar_I8() const
    {
      return this->m_var_I8;
    }

    //! Get member var_U16
    U16 getvar_U16() const
    {
      return this->m_var_U16;
    }

    //! Get member var_U32
    U32 getvar_U32() const
    {
      return this->m_var_U32;
    }

    //! Get member var_U64
    U64 getvar_U64() const
    {
      return this->m_var_U64;
    }

    //! Get member var_U8
    U8 getvar_U8() const
    {
      return this->m_var_U8;
    }

    //! Get member var_bool
    bool getvar_bool() const
    {
      return this->m_var_bool;
    }

    //! Get member var_string
    StringSize80& getvar_string()
    {
      return this->m_var_string;
    }

    //! Get member var_string (const)
    const StringSize80& getvar_string() const
    {
      return this->m_var_string;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        const Type_of_var_F32& var_F32,
        F64 var_F64,
        I16 var_I16,
        I32 var_I32,
        I64 var_I64,
        I8 var_I8,
        U16 var_U16,
        U32 var_U32,
        U64 var_U64,
        U8 var_U8,
        bool var_bool,
        const StringSize80& var_string
    );

    //! Set member var_F32
    void setvar_F32(const Type_of_var_F32& var_F32);

    //! Set member var_F64
    void setvar_F64(F64 var_F64);

    //! Set member var_I16
    void setvar_I16(I16 var_I16);

    //! Set member var_I32
    void setvar_I32(I32 var_I32);

    //! Set member var_I64
    void setvar_I64(I64 var_I64);

    //! Set member var_I8
    void setvar_I8(I8 var_I8);

    //! Set member var_U16
    void setvar_U16(U16 var_U16);

    //! Set member var_U32
    void setvar_U32(U32 var_U32);

    //! Set member var_U64
    void setvar_U64(U64 var_U64);

    //! Set member var_U8
    void setvar_U8(U8 var_U8);

    //! Set member var_bool
    void setvar_bool(bool var_bool);

    //! Set member var_string
    void setvar_string(const StringSize80& var_string);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    F32 m_var_F32[3];
    F64 m_var_F64;
    I16 m_var_I16;
    I32 m_var_I32;
    I64 m_var_I64;
    I8 m_var_I8;
    U16 m_var_U16;
    U32 m_var_U32;
    U64 m_var_U64;
    U8 m_var_U8;
    bool m_var_bool;
    StringSize80 m_var_string;

};

#endif
