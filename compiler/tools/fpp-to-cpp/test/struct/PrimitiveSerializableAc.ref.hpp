// ======================================================================
// \title  PrimitiveSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Primitive struct
// ======================================================================

#ifndef PrimitiveSerializableAc_HPP
#define PrimitiveSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

//! Top-level annotation, line 1
//! Top-level annotation, line 2
class Primitive :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // StringSize80 class
    // ----------------------------------------------------------------------

    class StringSize80 :
      public Fw::StringBase
    {

      public:

        enum {
          //! The size of the string length plus the size of the string buffer
          SERIALIZED_SIZE = sizeof(FwBuffSizeType) + 80
        };

        //! Default constructor
        StringSize80();

        //! Char array constructor
        StringSize80(const char* src);

        //! String base constructor
        StringSize80(const Fw::StringBase& src);

        //! Copy constructor
        StringSize80(const StringSize80& src);

        //! Destructor
        ~StringSize80();

        //! Copy assignment operator
        StringSize80& operator=(const StringSize80& other);

        //! String base assignment operator
        StringSize80& operator=(const Fw::StringBase& other);

        //! char* assignment operator
        StringSize80& operator=(const char* other);

        //! Retrieves char buffer of string
        const char* toChar() const;

        NATIVE_UINT_TYPE getCapacity() const;

      private:

        char m_buf[80]; //!< Buffer for string storage

    };

  public:

    // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    //! The array member types
    typedef F32 Type_of_memberF32[3];

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(F32) * 3 +
        sizeof(F64) +
        sizeof(I16) +
        sizeof(I32) +
        sizeof(I64) +
        sizeof(I8) +
        sizeof(U16) +
        sizeof(U32) +
        sizeof(U64) +
        sizeof(U8) +
        sizeof(U8) +
        StringSize80::SERIALIZED_SIZE
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Primitive();

    //! Member constructor
    Primitive(
        const Type_of_memberF32& memberF32,
        F64 memberF64,
        I16 memberI16,
        I32 memberI32,
        I64 memberI64,
        I8 memberI8,
        U16 memberU16,
        U32 memberU32,
        U64 memberU64,
        U8 memberU8,
        bool memberBool,
        const StringSize80& memberString
    );

    //! Copy constructor
    Primitive(
        const Primitive& obj //!< The source object
    );

    //! Member constructor (scalar values for arrays)
    Primitive(
        F32 memberF32,
        F64 memberF64,
        I16 memberI16,
        I32 memberI32,
        I64 memberI64,
        I8 memberI8,
        U16 memberU16,
        U32 memberU32,
        U64 memberU64,
        U8 memberU8,
        bool memberBool,
        const StringSize80& memberString
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    Primitive& operator=(
        const Primitive& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Primitive& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Primitive& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const Primitive& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member memberF32
    Type_of_memberF32& getmemberF32()
    {
      return this->m_memberF32;
    }

    //! Get member memberF32 (const)
    const Type_of_memberF32& getmemberF32() const
    {
      return this->m_memberF32;
    }

    //! Get member memberF64
    F64 getmemberF64() const
    {
      return this->m_memberF64;
    }

    //! Get member memberI16
    I16 getmemberI16() const
    {
      return this->m_memberI16;
    }

    //! Get member memberI32
    I32 getmemberI32() const
    {
      return this->m_memberI32;
    }

    //! Get member memberI64
    I64 getmemberI64() const
    {
      return this->m_memberI64;
    }

    //! Get member memberI8
    I8 getmemberI8() const
    {
      return this->m_memberI8;
    }

    //! Get member memberU16
    U16 getmemberU16() const
    {
      return this->m_memberU16;
    }

    //! Get member memberU32
    U32 getmemberU32() const
    {
      return this->m_memberU32;
    }

    //! Get member memberU64
    U64 getmemberU64() const
    {
      return this->m_memberU64;
    }

    //! Get member memberU8
    U8 getmemberU8() const
    {
      return this->m_memberU8;
    }

    //! Get member memberBool
    bool getmemberBool() const
    {
      return this->m_memberBool;
    }

    //! Get member memberString
    StringSize80& getmemberString()
    {
      return this->m_memberString;
    }

    //! Get member memberString (const)
    const StringSize80& getmemberString() const
    {
      return this->m_memberString;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        const Type_of_memberF32& memberF32,
        F64 memberF64,
        I16 memberI16,
        I32 memberI32,
        I64 memberI64,
        I8 memberI8,
        U16 memberU16,
        U32 memberU32,
        U64 memberU64,
        U8 memberU8,
        bool memberBool,
        const StringSize80& memberString
    );

    //! Set member memberF32
    void setmemberF32(const Type_of_memberF32& memberF32);

    //! Set member memberF64
    void setmemberF64(F64 memberF64);

    //! Set member memberI16
    void setmemberI16(I16 memberI16);

    //! Set member memberI32
    void setmemberI32(I32 memberI32);

    //! Set member memberI64
    void setmemberI64(I64 memberI64);

    //! Set member memberI8
    void setmemberI8(I8 memberI8);

    //! Set member memberU16
    void setmemberU16(U16 memberU16);

    //! Set member memberU32
    void setmemberU32(U32 memberU32);

    //! Set member memberU64
    void setmemberU64(U64 memberU64);

    //! Set member memberU8
    void setmemberU8(U8 memberU8);

    //! Set member memberBool
    void setmemberBool(bool memberBool);

    //! Set member memberString
    void setmemberString(const StringSize80& memberString);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    F32 m_memberF32[3];
    F64 m_memberF64;
    I16 m_memberI16;
    I32 m_memberI32;
    I64 m_memberI64;
    I8 m_memberI8;
    U16 m_memberU16;
    U32 m_memberU32;
    U64 m_memberU64;
    U8 m_memberU8;
    bool m_memberBool;
    StringSize80 m_memberString;

};

#endif
