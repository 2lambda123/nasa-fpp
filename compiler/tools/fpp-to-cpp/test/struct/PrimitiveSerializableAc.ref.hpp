// ======================================================================
// \title  PrimitiveSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Primitive struct
// ======================================================================

#ifndef PrimitiveSerializableAc_HPP
#define PrimitiveSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

//! Top-level annotation, line 1
//! Top-level annotation, line 2
class Primitive :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // StringSize80 class
    // ----------------------------------------------------------------------

    class StringSize80 :
      public Fw::StringBase
    {

      public:

        enum {
          //! The size of the string length plus the size of the string buffer
          SERIALIZED_SIZE = sizeof(FwBuffSizeType) + 80
        };

        //! Default constructor
        StringSize80();

        //! Char array constructor
        StringSize80(const char* src);

        //! String base constructor
        StringSize80(const Fw::StringBase& src);

        //! Copy constructor
        StringSize80(const StringSize80& src);

        //! Destructor
        ~StringSize80();

        //! Copy assignment operator
        StringSize80& operator=(const StringSize80& other);

        //! String base assignment operator
        StringSize80& operator=(const Fw::StringBase& other);

        //! char* assignment operator
        StringSize80& operator=(const char* other);

        //! Retrieves char buffer of string
        const char* toChar() const;

        NATIVE_UINT_TYPE getCapacity() const;

      private:

        char m_buf[80]; //!< Buffer for string storage

    };

  public:

    // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    //! The array member types
    typedef F32 Type_of_varF32[3];

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(F32) * 3 +
        sizeof(F64) +
        sizeof(I16) +
        sizeof(I32) +
        sizeof(I64) +
        sizeof(I8) +
        sizeof(U16) +
        sizeof(U32) +
        sizeof(U64) +
        sizeof(U8) +
        sizeof(U8) +
        StringSize80::SERIALIZED_SIZE
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Primitive();

    //! Member constructor
    Primitive(
        const Type_of_varF32& varF32,
        F64 varF64,
        I16 varI16,
        I32 varI32,
        I64 varI64,
        I8 varI8,
        U16 varU16,
        U32 varU32,
        U64 varU64,
        U8 varU8,
        bool varBool,
        const StringSize80& varString
    );

    //! Copy constructor
    Primitive(
        const Primitive& obj //!< The source object
    );

    //! Member constructor (scalar values for arrays)
    Primitive(
        F32 varF32,
        F64 varF64,
        I16 varI16,
        I32 varI32,
        I64 varI64,
        I8 varI8,
        U16 varU16,
        U32 varU32,
        U64 varU64,
        U8 varU8,
        bool varBool,
        const StringSize80& varString
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    Primitive& operator=(
        const Primitive& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Primitive& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Primitive& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const Primitive& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member varF32
    Type_of_varF32& getvarF32()
    {
      return this->m_varF32;
    }

    //! Get member varF32 (const)
    const Type_of_varF32& getvarF32() const
    {
      return this->m_varF32;
    }

    //! Get member varF64
    F64 getvarF64() const
    {
      return this->m_varF64;
    }

    //! Get member varI16
    I16 getvarI16() const
    {
      return this->m_varI16;
    }

    //! Get member varI32
    I32 getvarI32() const
    {
      return this->m_varI32;
    }

    //! Get member varI64
    I64 getvarI64() const
    {
      return this->m_varI64;
    }

    //! Get member varI8
    I8 getvarI8() const
    {
      return this->m_varI8;
    }

    //! Get member varU16
    U16 getvarU16() const
    {
      return this->m_varU16;
    }

    //! Get member varU32
    U32 getvarU32() const
    {
      return this->m_varU32;
    }

    //! Get member varU64
    U64 getvarU64() const
    {
      return this->m_varU64;
    }

    //! Get member varU8
    U8 getvarU8() const
    {
      return this->m_varU8;
    }

    //! Get member varBool
    bool getvarBool() const
    {
      return this->m_varBool;
    }

    //! Get member varString
    StringSize80& getvarString()
    {
      return this->m_varString;
    }

    //! Get member varString (const)
    const StringSize80& getvarString() const
    {
      return this->m_varString;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        const Type_of_varF32& varF32,
        F64 varF64,
        I16 varI16,
        I32 varI32,
        I64 varI64,
        I8 varI8,
        U16 varU16,
        U32 varU32,
        U64 varU64,
        U8 varU8,
        bool varBool,
        const StringSize80& varString
    );

    //! Set member varF32
    void setvarF32(const Type_of_varF32& varF32);

    //! Set member varF64
    void setvarF64(F64 varF64);

    //! Set member varI16
    void setvarI16(I16 varI16);

    //! Set member varI32
    void setvarI32(I32 varI32);

    //! Set member varI64
    void setvarI64(I64 varI64);

    //! Set member varI8
    void setvarI8(I8 varI8);

    //! Set member varU16
    void setvarU16(U16 varU16);

    //! Set member varU32
    void setvarU32(U32 varU32);

    //! Set member varU64
    void setvarU64(U64 varU64);

    //! Set member varU8
    void setvarU8(U8 varU8);

    //! Set member varBool
    void setvarBool(bool varBool);

    //! Set member varString
    void setvarString(const StringSize80& varString);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    F32 m_varF32[3];
    F64 m_varF64;
    I16 m_varI16;
    I32 m_varI32;
    I64 m_varI64;
    I8 m_varI8;
    U16 m_varU16;
    U32 m_varU32;
    U64 m_varU64;
    U8 m_varU8;
    bool m_varBool;
    StringSize80 m_varString;

};

#endif
