// ======================================================================
// \title  FormatSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Format struct
// ======================================================================

#ifndef FormatSerializableAc_HPP
#define FormatSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

class Format :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32)
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Format();

    //! Member constructor
    Format(
        I32 member1,
        U32 member2,
        I32 member3,
        U32 member4,
        I32 member5,
        U32 member6,
        I32 member7,
        U32 member8,
        I32 member9,
        U32 member10,
        F32 member11,
        F32 member12,
        F32 member13,
        F32 member14,
        F32 member15,
        F32 member16,
        F32 member17
    );

    //! Copy constructor
    Format(
        const Format& obj //!< The source object
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    Format& operator=(
        const Format& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Format& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Format& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const Format& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member member1
    I32 getmember1() const
    {
      return this->m_member1;
    }

    //! Get member member2
    U32 getmember2() const
    {
      return this->m_member2;
    }

    //! Get member member3
    I32 getmember3() const
    {
      return this->m_member3;
    }

    //! Get member member4
    U32 getmember4() const
    {
      return this->m_member4;
    }

    //! Get member member5
    I32 getmember5() const
    {
      return this->m_member5;
    }

    //! Get member member6
    U32 getmember6() const
    {
      return this->m_member6;
    }

    //! Get member member7
    I32 getmember7() const
    {
      return this->m_member7;
    }

    //! Get member member8
    U32 getmember8() const
    {
      return this->m_member8;
    }

    //! Get member member9
    I32 getmember9() const
    {
      return this->m_member9;
    }

    //! Get member member10
    U32 getmember10() const
    {
      return this->m_member10;
    }

    //! Get member member11
    F32 getmember11() const
    {
      return this->m_member11;
    }

    //! Get member member12
    F32 getmember12() const
    {
      return this->m_member12;
    }

    //! Get member member13
    F32 getmember13() const
    {
      return this->m_member13;
    }

    //! Get member member14
    F32 getmember14() const
    {
      return this->m_member14;
    }

    //! Get member member15
    F32 getmember15() const
    {
      return this->m_member15;
    }

    //! Get member member16
    F32 getmember16() const
    {
      return this->m_member16;
    }

    //! Get member member17
    F32 getmember17() const
    {
      return this->m_member17;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        I32 member1,
        U32 member2,
        I32 member3,
        U32 member4,
        I32 member5,
        U32 member6,
        I32 member7,
        U32 member8,
        I32 member9,
        U32 member10,
        F32 member11,
        F32 member12,
        F32 member13,
        F32 member14,
        F32 member15,
        F32 member16,
        F32 member17
    );

    //! Set member member1
    void setmember1(I32 member1);

    //! Set member member2
    void setmember2(U32 member2);

    //! Set member member3
    void setmember3(I32 member3);

    //! Set member member4
    void setmember4(U32 member4);

    //! Set member member5
    void setmember5(I32 member5);

    //! Set member member6
    void setmember6(U32 member6);

    //! Set member member7
    void setmember7(I32 member7);

    //! Set member member8
    void setmember8(U32 member8);

    //! Set member member9
    void setmember9(I32 member9);

    //! Set member member10
    void setmember10(U32 member10);

    //! Set member member11
    void setmember11(F32 member11);

    //! Set member member12
    void setmember12(F32 member12);

    //! Set member member13
    void setmember13(F32 member13);

    //! Set member member14
    void setmember14(F32 member14);

    //! Set member member15
    void setmember15(F32 member15);

    //! Set member member16
    void setmember16(F32 member16);

    //! Set member member17
    void setmember17(F32 member17);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    I32 m_member1;
    U32 m_member2;
    I32 m_member3;
    U32 m_member4;
    I32 m_member5;
    U32 m_member6;
    I32 m_member7;
    U32 m_member8;
    I32 m_member9;
    U32 m_member10;
    F32 m_member11;
    F32 m_member12;
    F32 m_member13;
    F32 m_member14;
    F32 m_member15;
    F32 m_member16;
    F32 m_member17;

};

#endif
