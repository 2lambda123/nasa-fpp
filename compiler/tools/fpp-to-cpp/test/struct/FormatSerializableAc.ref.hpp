// ======================================================================
// \title  FormatSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Format struct
// ======================================================================

#ifndef FormatSerializableAc_HPP
#define FormatSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

class Format :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(I32) +
        sizeof(U32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32) +
        sizeof(F32)
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Format();

    //! Member constructor
    Format(
        I32 I32_1,
        U32 U32_2,
        I32 I32_3,
        U32 U32_4,
        I32 I32_5,
        U32 U32_6,
        I32 I32_7,
        U32 U32_8,
        I32 I32_9,
        U32 U32_10,
        F32 F32_11,
        F32 F32_12,
        F32 F32_13,
        F32 F32_14,
        F32 F32_15,
        F32 F32_16,
        F32 F32_17
    );

    //! Copy constructor
    Format(
        const Format& obj //!< The source object
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    Format& operator=(
        const Format& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Format& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Format& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const Format& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member I32_1
    I32 getI32_1() const
    {
      return this->m_I32_1;
    }

    //! Get member U32_2
    U32 getU32_2() const
    {
      return this->m_U32_2;
    }

    //! Get member I32_3
    I32 getI32_3() const
    {
      return this->m_I32_3;
    }

    //! Get member U32_4
    U32 getU32_4() const
    {
      return this->m_U32_4;
    }

    //! Get member I32_5
    I32 getI32_5() const
    {
      return this->m_I32_5;
    }

    //! Get member U32_6
    U32 getU32_6() const
    {
      return this->m_U32_6;
    }

    //! Get member I32_7
    I32 getI32_7() const
    {
      return this->m_I32_7;
    }

    //! Get member U32_8
    U32 getU32_8() const
    {
      return this->m_U32_8;
    }

    //! Get member I32_9
    I32 getI32_9() const
    {
      return this->m_I32_9;
    }

    //! Get member U32_10
    U32 getU32_10() const
    {
      return this->m_U32_10;
    }

    //! Get member F32_11
    F32 getF32_11() const
    {
      return this->m_F32_11;
    }

    //! Get member F32_12
    F32 getF32_12() const
    {
      return this->m_F32_12;
    }

    //! Get member F32_13
    F32 getF32_13() const
    {
      return this->m_F32_13;
    }

    //! Get member F32_14
    F32 getF32_14() const
    {
      return this->m_F32_14;
    }

    //! Get member F32_15
    F32 getF32_15() const
    {
      return this->m_F32_15;
    }

    //! Get member F32_16
    F32 getF32_16() const
    {
      return this->m_F32_16;
    }

    //! Get member F32_17
    F32 getF32_17() const
    {
      return this->m_F32_17;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        I32 I32_1,
        U32 U32_2,
        I32 I32_3,
        U32 U32_4,
        I32 I32_5,
        U32 U32_6,
        I32 I32_7,
        U32 U32_8,
        I32 I32_9,
        U32 U32_10,
        F32 F32_11,
        F32 F32_12,
        F32 F32_13,
        F32 F32_14,
        F32 F32_15,
        F32 F32_16,
        F32 F32_17
    );

    //! Set member I32_1
    void setI32_1(I32 I32_1);

    //! Set member U32_2
    void setU32_2(U32 U32_2);

    //! Set member I32_3
    void setI32_3(I32 I32_3);

    //! Set member U32_4
    void setU32_4(U32 U32_4);

    //! Set member I32_5
    void setI32_5(I32 I32_5);

    //! Set member U32_6
    void setU32_6(U32 U32_6);

    //! Set member I32_7
    void setI32_7(I32 I32_7);

    //! Set member U32_8
    void setU32_8(U32 U32_8);

    //! Set member I32_9
    void setI32_9(I32 I32_9);

    //! Set member U32_10
    void setU32_10(U32 U32_10);

    //! Set member F32_11
    void setF32_11(F32 F32_11);

    //! Set member F32_12
    void setF32_12(F32 F32_12);

    //! Set member F32_13
    void setF32_13(F32 F32_13);

    //! Set member F32_14
    void setF32_14(F32 F32_14);

    //! Set member F32_15
    void setF32_15(F32 F32_15);

    //! Set member F32_16
    void setF32_16(F32 F32_16);

    //! Set member F32_17
    void setF32_17(F32 F32_17);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    I32 m_I32_1;
    U32 m_U32_2;
    I32 m_I32_3;
    U32 m_U32_4;
    I32 m_I32_5;
    U32 m_U32_6;
    I32 m_I32_7;
    U32 m_U32_8;
    I32 m_I32_9;
    U32 m_U32_10;
    F32 m_F32_11;
    F32 m_F32_12;
    F32 m_F32_13;
    F32 m_F32_14;
    F32 m_F32_15;
    F32 m_F32_16;
    F32 m_F32_17;

};

#endif
