// ======================================================================
// \title  FormatSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Format struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "FormatSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Format ::
  Format() :
    Serializable(),
    m_I32_1(0),
    m_U32_2(0),
    m_I32_3(0),
    m_U32_4(0),
    m_I32_5(0),
    m_U32_6(0),
    m_I32_7(0),
    m_U32_8(0),
    m_I32_9(0),
    m_U32_10(0),
    m_F32_11(0.0f),
    m_F32_12(0.0f),
    m_F32_13(0.0f),
    m_F32_14(0.0f),
    m_F32_15(0.0f),
    m_F32_16(0.0f),
    m_F32_17(0.0f)
{

}

Format ::
  Format(
      I32 I32_1,
      U32 U32_2,
      I32 I32_3,
      U32 U32_4,
      I32 I32_5,
      U32 U32_6,
      I32 I32_7,
      U32 U32_8,
      I32 I32_9,
      U32 U32_10,
      F32 F32_11,
      F32 F32_12,
      F32 F32_13,
      F32 F32_14,
      F32 F32_15,
      F32 F32_16,
      F32 F32_17
  ) :
    Serializable(),
    m_I32_1(I32_1),
    m_U32_2(U32_2),
    m_I32_3(I32_3),
    m_U32_4(U32_4),
    m_I32_5(I32_5),
    m_U32_6(U32_6),
    m_I32_7(I32_7),
    m_U32_8(U32_8),
    m_I32_9(I32_9),
    m_U32_10(U32_10),
    m_F32_11(F32_11),
    m_F32_12(F32_12),
    m_F32_13(F32_13),
    m_F32_14(F32_14),
    m_F32_15(F32_15),
    m_F32_16(F32_16),
    m_F32_17(F32_17)
{

}

Format ::
  Format(const Format& obj) :
    Serializable(),
    m_I32_1(obj.m_I32_1),
    m_U32_2(obj.m_U32_2),
    m_I32_3(obj.m_I32_3),
    m_U32_4(obj.m_U32_4),
    m_I32_5(obj.m_I32_5),
    m_U32_6(obj.m_U32_6),
    m_I32_7(obj.m_I32_7),
    m_U32_8(obj.m_U32_8),
    m_I32_9(obj.m_I32_9),
    m_U32_10(obj.m_U32_10),
    m_F32_11(obj.m_F32_11),
    m_F32_12(obj.m_F32_12),
    m_F32_13(obj.m_F32_13),
    m_F32_14(obj.m_F32_14),
    m_F32_15(obj.m_F32_15),
    m_F32_16(obj.m_F32_16),
    m_F32_17(obj.m_F32_17)
{

}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

Format& Format ::
  operator=(const Format& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_I32_1, obj.m_U32_2, obj.m_I32_3, obj.m_U32_4, obj.m_I32_5, obj.m_U32_6, obj.m_I32_7, obj.m_U32_8, obj.m_I32_9, obj.m_U32_10, obj.m_F32_11, obj.m_F32_12, obj.m_F32_13, obj.m_F32_14, obj.m_F32_15, obj.m_F32_16, obj.m_F32_17);
  return *this;
}

bool Format ::
  operator==(const Format& obj) const
{
  return (
    (this->m_I32_1 == obj.m_I32_1) &&
    (this->m_U32_2 == obj.m_U32_2) &&
    (this->m_I32_3 == obj.m_I32_3) &&
    (this->m_U32_4 == obj.m_U32_4) &&
    (this->m_I32_5 == obj.m_I32_5) &&
    (this->m_U32_6 == obj.m_U32_6) &&
    (this->m_I32_7 == obj.m_I32_7) &&
    (this->m_U32_8 == obj.m_U32_8) &&
    (this->m_I32_9 == obj.m_I32_9) &&
    (this->m_U32_10 == obj.m_U32_10) &&
    (this->m_F32_11 == obj.m_F32_11) &&
    (this->m_F32_12 == obj.m_F32_12) &&
    (this->m_F32_13 == obj.m_F32_13) &&
    (this->m_F32_14 == obj.m_F32_14) &&
    (this->m_F32_15 == obj.m_F32_15) &&
    (this->m_F32_16 == obj.m_F32_16) &&
    (this->m_F32_17 == obj.m_F32_17)
  );
}

bool Format ::
  operator!=(const Format& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const Format& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Format ::
  serialize(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serialize(this->m_I32_1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_U32_2);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_I32_3);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_U32_4);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_I32_5);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_U32_6);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_I32_7);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_U32_8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_I32_9);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_U32_10);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_11);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_12);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_13);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_14);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_15);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_F32_17);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus Format ::
  deserialize(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserialize(this->m_I32_1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_U32_2);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_I32_3);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_U32_4);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_I32_5);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_U32_6);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_I32_7);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_U32_8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_I32_9);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_U32_10);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_11);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_12);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_13);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_14);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_15);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_F32_17);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

#if FW_SERIALIZABLE_TO_STRING

void Format ::
  toString(Fw::StringBase& sb) const
{
  static const char* formatString =
    "( "
    "m_I32_1 = %" PRIi32 ", "
    "m_U32_2 = %" PRIu32 ", "
    "m_I32_3 = %" PRIi32 ", "
    "m_U32_4 = %" PRIu32 ", "
    "m_I32_5 = %" PRIx32 ", "
    "m_U32_6 = %" PRIx32 ", "
    "m_I32_7 = %c, "
    "m_U32_8 = %c, "
    "m_I32_9 = %" PRIo32 ", "
    "m_U32_10 = %" PRIo32 ", "
    "m_F32_11 = %e, "
    "m_F32_12 = %f, "
    "m_F32_13 = %g, "
    "m_F32_14 = %.3e, "
    "m_F32_15 = %.3f, "
    "m_F32_16 = %.3g, "
    "m_F32_17 = %.3g%%"
    " )";

  char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
  (void) snprintf(
    outputString,
    FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
    formatString,
    this->m_I32_1,
    this->m_U32_2,
    this->m_I32_3,
    this->m_U32_4,
    this->m_I32_5,
    this->m_U32_6,
    this->m_I32_7,
    this->m_U32_8,
    this->m_I32_9,
    this->m_U32_10,
    this->m_F32_11,
    this->m_F32_12,
    this->m_F32_13,
    this->m_F32_14,
    this->m_F32_15,
    this->m_F32_16,
    this->m_F32_17
  );

  outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
  sb = outputString;
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Format ::
  set(
      I32 I32_1,
      U32 U32_2,
      I32 I32_3,
      U32 U32_4,
      I32 I32_5,
      U32 U32_6,
      I32 I32_7,
      U32 U32_8,
      I32 I32_9,
      U32 U32_10,
      F32 F32_11,
      F32 F32_12,
      F32 F32_13,
      F32 F32_14,
      F32 F32_15,
      F32 F32_16,
      F32 F32_17
  )
{
  this->m_I32_1 = I32_1;
  this->m_U32_2 = U32_2;
  this->m_I32_3 = I32_3;
  this->m_U32_4 = U32_4;
  this->m_I32_5 = I32_5;
  this->m_U32_6 = U32_6;
  this->m_I32_7 = I32_7;
  this->m_U32_8 = U32_8;
  this->m_I32_9 = I32_9;
  this->m_U32_10 = U32_10;
  this->m_F32_11 = F32_11;
  this->m_F32_12 = F32_12;
  this->m_F32_13 = F32_13;
  this->m_F32_14 = F32_14;
  this->m_F32_15 = F32_15;
  this->m_F32_16 = F32_16;
  this->m_F32_17 = F32_17;
}

void Format ::
  setI32_1(I32 I32_1)
{
  this->m_I32_1 = I32_1;
}

void Format ::
  setU32_2(U32 U32_2)
{
  this->m_U32_2 = U32_2;
}

void Format ::
  setI32_3(I32 I32_3)
{
  this->m_I32_3 = I32_3;
}

void Format ::
  setU32_4(U32 U32_4)
{
  this->m_U32_4 = U32_4;
}

void Format ::
  setI32_5(I32 I32_5)
{
  this->m_I32_5 = I32_5;
}

void Format ::
  setU32_6(U32 U32_6)
{
  this->m_U32_6 = U32_6;
}

void Format ::
  setI32_7(I32 I32_7)
{
  this->m_I32_7 = I32_7;
}

void Format ::
  setU32_8(U32 U32_8)
{
  this->m_U32_8 = U32_8;
}

void Format ::
  setI32_9(I32 I32_9)
{
  this->m_I32_9 = I32_9;
}

void Format ::
  setU32_10(U32 U32_10)
{
  this->m_U32_10 = U32_10;
}

void Format ::
  setF32_11(F32 F32_11)
{
  this->m_F32_11 = F32_11;
}

void Format ::
  setF32_12(F32 F32_12)
{
  this->m_F32_12 = F32_12;
}

void Format ::
  setF32_13(F32 F32_13)
{
  this->m_F32_13 = F32_13;
}

void Format ::
  setF32_14(F32 F32_14)
{
  this->m_F32_14 = F32_14;
}

void Format ::
  setF32_15(F32 F32_15)
{
  this->m_F32_15 = F32_15;
}

void Format ::
  setF32_16(F32 F32_16)
{
  this->m_F32_16 = F32_16;
}

void Format ::
  setF32_17(F32 F32_17)
{
  this->m_F32_17 = F32_17;
}
