// ======================================================================
// \title  FormatSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Format struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "FormatSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Format ::
  Format() :
    Serializable(),
    m_member1(0),
    m_member2(0),
    m_member3(0),
    m_member4(0),
    m_member5(0),
    m_member6(0),
    m_member7(0),
    m_member8(0),
    m_member9(0),
    m_member10(0),
    m_member11(0.0f),
    m_member12(0.0f),
    m_member13(0.0f),
    m_member14(0.0f),
    m_member15(0.0f),
    m_member16(0.0f),
    m_member17(0.0f)
{

}

Format ::
  Format(
      I32 member1,
      U32 member2,
      I32 member3,
      U32 member4,
      I32 member5,
      U32 member6,
      I32 member7,
      U32 member8,
      I32 member9,
      U32 member10,
      F32 member11,
      F32 member12,
      F32 member13,
      F32 member14,
      F32 member15,
      F32 member16,
      F32 member17
  ) :
    Serializable(),
    m_member1(member1),
    m_member2(member2),
    m_member3(member3),
    m_member4(member4),
    m_member5(member5),
    m_member6(member6),
    m_member7(member7),
    m_member8(member8),
    m_member9(member9),
    m_member10(member10),
    m_member11(member11),
    m_member12(member12),
    m_member13(member13),
    m_member14(member14),
    m_member15(member15),
    m_member16(member16),
    m_member17(member17)
{

}

Format ::
  Format(const Format& obj) :
    Serializable(),
    m_member1(obj.m_member1),
    m_member2(obj.m_member2),
    m_member3(obj.m_member3),
    m_member4(obj.m_member4),
    m_member5(obj.m_member5),
    m_member6(obj.m_member6),
    m_member7(obj.m_member7),
    m_member8(obj.m_member8),
    m_member9(obj.m_member9),
    m_member10(obj.m_member10),
    m_member11(obj.m_member11),
    m_member12(obj.m_member12),
    m_member13(obj.m_member13),
    m_member14(obj.m_member14),
    m_member15(obj.m_member15),
    m_member16(obj.m_member16),
    m_member17(obj.m_member17)
{

}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

Format& Format ::
  operator=(const Format& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_member1, obj.m_member2, obj.m_member3, obj.m_member4, obj.m_member5, obj.m_member6, obj.m_member7, obj.m_member8, obj.m_member9, obj.m_member10, obj.m_member11, obj.m_member12, obj.m_member13, obj.m_member14, obj.m_member15, obj.m_member16, obj.m_member17);
  return *this;
}

bool Format ::
  operator==(const Format& obj) const
{
  return (
    (this->m_member1 == obj.m_member1) &&
    (this->m_member2 == obj.m_member2) &&
    (this->m_member3 == obj.m_member3) &&
    (this->m_member4 == obj.m_member4) &&
    (this->m_member5 == obj.m_member5) &&
    (this->m_member6 == obj.m_member6) &&
    (this->m_member7 == obj.m_member7) &&
    (this->m_member8 == obj.m_member8) &&
    (this->m_member9 == obj.m_member9) &&
    (this->m_member10 == obj.m_member10) &&
    (this->m_member11 == obj.m_member11) &&
    (this->m_member12 == obj.m_member12) &&
    (this->m_member13 == obj.m_member13) &&
    (this->m_member14 == obj.m_member14) &&
    (this->m_member15 == obj.m_member15) &&
    (this->m_member16 == obj.m_member16) &&
    (this->m_member17 == obj.m_member17)
  );
}

bool Format ::
  operator!=(const Format& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const Format& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Format ::
  serialize(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serialize(this->m_member1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member2);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member3);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member4);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member5);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member6);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member7);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member9);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member10);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member11);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member12);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member13);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member14);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member15);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_member17);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus Format ::
  deserialize(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserialize(this->m_member1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member2);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member3);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member4);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member5);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member6);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member7);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member9);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member10);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member11);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member12);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member13);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member14);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member15);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_member17);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

#if FW_SERIALIZABLE_TO_STRING

void Format ::
  toString(Fw::StringBase& sb) const
{
  static const char* formatString =
    "( "
    "m_member1 = %" PRIi32 ", "
    "m_member2 = %" PRIu32 ", "
    "m_member3 = %" PRIi32 ", "
    "m_member4 = %" PRIu32 ", "
    "m_member5 = %" PRIx32 ", "
    "m_member6 = %" PRIx32 ", "
    "m_member7 = %c, "
    "m_member8 = %c, "
    "m_member9 = %" PRIo32 ", "
    "m_member10 = %" PRIo32 ", "
    "m_member11 = %e, "
    "m_member12 = %f, "
    "m_member13 = %g, "
    "m_member14 = %.3e, "
    "m_member15 = %.3f, "
    "m_member16 = %.3g, "
    "m_member17 = %.3g%%"
    " )";

  char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
  (void) snprintf(
    outputString,
    FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
    formatString,
    this->m_member1,
    this->m_member2,
    this->m_member3,
    this->m_member4,
    this->m_member5,
    this->m_member6,
    this->m_member7,
    this->m_member8,
    this->m_member9,
    this->m_member10,
    this->m_member11,
    this->m_member12,
    this->m_member13,
    this->m_member14,
    this->m_member15,
    this->m_member16,
    this->m_member17
  );

  outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
  sb = outputString;
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Format ::
  set(
      I32 member1,
      U32 member2,
      I32 member3,
      U32 member4,
      I32 member5,
      U32 member6,
      I32 member7,
      U32 member8,
      I32 member9,
      U32 member10,
      F32 member11,
      F32 member12,
      F32 member13,
      F32 member14,
      F32 member15,
      F32 member16,
      F32 member17
  )
{
  this->m_member1 = member1;
  this->m_member2 = member2;
  this->m_member3 = member3;
  this->m_member4 = member4;
  this->m_member5 = member5;
  this->m_member6 = member6;
  this->m_member7 = member7;
  this->m_member8 = member8;
  this->m_member9 = member9;
  this->m_member10 = member10;
  this->m_member11 = member11;
  this->m_member12 = member12;
  this->m_member13 = member13;
  this->m_member14 = member14;
  this->m_member15 = member15;
  this->m_member16 = member16;
  this->m_member17 = member17;
}

void Format ::
  setmember1(I32 member1)
{
  this->m_member1 = member1;
}

void Format ::
  setmember2(U32 member2)
{
  this->m_member2 = member2;
}

void Format ::
  setmember3(I32 member3)
{
  this->m_member3 = member3;
}

void Format ::
  setmember4(U32 member4)
{
  this->m_member4 = member4;
}

void Format ::
  setmember5(I32 member5)
{
  this->m_member5 = member5;
}

void Format ::
  setmember6(U32 member6)
{
  this->m_member6 = member6;
}

void Format ::
  setmember7(I32 member7)
{
  this->m_member7 = member7;
}

void Format ::
  setmember8(U32 member8)
{
  this->m_member8 = member8;
}

void Format ::
  setmember9(I32 member9)
{
  this->m_member9 = member9;
}

void Format ::
  setmember10(U32 member10)
{
  this->m_member10 = member10;
}

void Format ::
  setmember11(F32 member11)
{
  this->m_member11 = member11;
}

void Format ::
  setmember12(F32 member12)
{
  this->m_member12 = member12;
}

void Format ::
  setmember13(F32 member13)
{
  this->m_member13 = member13;
}

void Format ::
  setmember14(F32 member14)
{
  this->m_member14 = member14;
}

void Format ::
  setmember15(F32 member15)
{
  this->m_member15 = member15;
}

void Format ::
  setmember16(F32 member16)
{
  this->m_member16 = member16;
}

void Format ::
  setmember17(F32 member17)
{
  this->m_member17 = member17;
}
