// ======================================================================
// \title  EmptySerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Empty struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "EmptySerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Empty ::
  Empty() :
    Serializable()
{

}

Empty ::
  Empty() :
    Serializable()
{

}

Empty ::
  Empty(const Empty& obj) :
    Serializable()
{

}

Empty& Empty ::
  operator=(const Empty& obj)
{
  if (this == &obj) {
    return *this;
  }

  set();
  return *this;
}

bool Empty ::
  operator==(const Empty& obj) const
{
  return (

  );
}

bool Empty ::
  operator!=(const Empty& obj) const
{
  return !(*this == obj);
}

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Empty ::
  serialize(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;


  return status;
}

Fw::SerializeStatus Empty ::
  deserialize(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;


  return status;
}

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

void Empty ::
  toString(Fw::StringBase& sb) const
{
  static const char* formatString =
    "( "
    ""
    " )";

  char outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE];
  (void) snprintf(
    outputString,
    FW_ARRAY_TO_STRING_BUFFER_SIZE,
    formatString,

  );

  outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
  sb = outputString;
}

#endif

// ----------------------------------------------------------------------
// Getter functions
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Empty ::
  set()
{

}
