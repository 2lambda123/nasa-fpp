// ======================================================================
// \title  EnumSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Enum struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "EnumSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Enum ::
  Enum() :
    Serializable(),
    e(M::E::X)
{

}

Enum ::
  Enum(const M::E& e) :
    Serializable(),
    e(e)
{

}

Enum ::
  Enum(const Enum& obj) :
    Serializable(),
    e(obj.e)
{

}

Enum& Enum ::
  operator=(const Enum& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.e);
  return *this;
}

bool Enum ::
  operator==(const Enum& obj) const
{
  return (
    (this->e == obj.e)
  );
}

bool Enum ::
  operator!=(const Enum& obj) const
{
  return !(*this == obj);
}

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Enum ::
  serialize(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serialize(this->e);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus Enum ::
  deserialize(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserialize(this->e);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

void Enum ::
  toString(Fw::StringBase& sb) const
{
  static const char* formatString =
    "( "
    "e = %s"
    " )";

  // Declare strings to hold any serializable toString() arguments
  Fw::String eStr;

  // Call toString for arrays and serializable types
  this->e.toString(eStr);

  char outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE];
  (void) snprintf(
    outputString,
    FW_ARRAY_TO_STRING_BUFFER_SIZE,
    formatString,
    eStr.toChar()
  );

  outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
  sb = outputString;
}

#endif

// ----------------------------------------------------------------------
// Getter functions
// ----------------------------------------------------------------------

const M::E& Enum ::
  gete() const
{
  return this->e;
}

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Enum ::
  set(const M::E& e)
{
  this->e = e;

}

void Enum ::
  sete(const M::E& e)
{
  this->e = e;
}
