// ====================================================================== 
// \title  HealthTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Health topology
//
// \copyright
// Copyright (c) 2021 California Institute of Technology.
// U.S. Government sponsorship acknowledged.
// All rights reserved.
// ======================================================================

#include "HealthTopologyAc.hpp"

namespace Svc {

  namespace {

    // ----------------------------------------------------------------------
    // Component configuration objects
    // ----------------------------------------------------------------------

    namespace ConfigObjects {

      namespace health {
        Svc::HealthImpl::PingEntry pingEntries[] = {
          {
            PingEntries::c1::WARN,
            PingEntries::c1::FATAL,
            "c1"
          },
          {
            PingEntries::c2::WARN,
            PingEntries::c2::FATAL,
            "c2"
          },
        }
      }

    }

    // ----------------------------------------------------------------------
    // Component instances
    // ----------------------------------------------------------------------

    // health
    Health health(FW_OPTIONAL_NAME("health"));

    // c1
    C c1(FW_OPTIONAL_NAME("c1"));

    // c2
    C c2(FW_OPTIONAL_NAME("c2"));

    // ----------------------------------------------------------------------
    // Private functions
    // ----------------------------------------------------------------------

    // Initialize components
    void initComponents(const TopologyState& state) {
      health.init(InstanceIDs::health);
      c1.init(InstanceIDs::c1);
      c2.init(InstanceIDs::c2);
    }

    // Set component base IDs
    void setBaseIds() {
      health.setidBase(0x100);
      c1.setidBase(0x200);
      c2.setidBase(0x300);
    }

    // Connect components
    void connectComponents() {

      // Health
      c2.set_pingOut_OutputPort(
        0,
        health_get_pingIn_InputPort(1)
      );
      health.set_pingOut_OutputPort(
        1,
        c2_get_pingIn_InputPort(0)
      );
      c1.set_pingOut_OutputPort(
        0,
        health_get_pingIn_InputPort(0)
      );
      health.set_pingOut_OutputPort(
        0,
        c1_get_pingIn_InputPort(0)
      );

    }

  }

  // ----------------------------------------------------------------------
  // Public interface functions
  // ----------------------------------------------------------------------

  setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
  }

  teardown(const TopologyState& state) {

  }

}
