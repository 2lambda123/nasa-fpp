// ======================================================================
// \title  FppTypePortAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for FppType port
// ======================================================================

#include <cstdio>
#include <cstring>

#include "FppTypePortAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

// ----------------------------------------------------------------------
// Input Port Member functions
// ----------------------------------------------------------------------

InputFppTypePort ::
  InputFppTypePort() :
    Fw::InputPortBase(),
    m_func(nullptr)
{

}

void InputFppTypePort ::
  init()
{
  Fw::InputPortBase::init();
}

void InputFppTypePort ::
  addCallComp(
      Fw::PassiveComponentBase* callComp,
      CompFuncPtr funcPtr
  )
{
  FW_ASSERT(callComp);
  FW_ASSERT(funcPtr);

  this->m_comp = callComp;
  this->m_func = funcPtr;
  this->m_connObj = callComp;
}

void InputFppTypePort ::
  invoke(
      const E& e,
      E& eRef,
      const A& a,
      A& aRef,
      const S& s,
      S& sRef
  )
{
#if FW_PORT_TRACING == 1
  this->trace();
#endif

  FW_ASSERT(this->m_comp);
  FW_ASSERT(this->m_func);

  return this->m_func(this->m_comp, this->m_portNum, e, eRef, a, aRef, s, sRef);
}

// ----------------------------------------------------------------------
// Output Port Member functions
// ----------------------------------------------------------------------

OutputFppTypePort ::
  OutputFppTypePort() :
    Fw::OutputPortBase(),
    m_port(nullptr)
{

}

void OutputFppTypePort ::
  init()
{
  Fw::OutputPortBase::init();
}

void OutputFppTypePort ::
  addCallPort(InputFppTypePort* callPort)
{
  FW_ASSERT(callPort);

  this->m_port = callPort;
  this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
  this->m_serPort = nullptr;
#endif
}

void OutputFppTypePort ::
  invoke(
      const E& e,
      E& eRef,
      const A& a,
      A& aRef,
      const S& s,
      S& sRef
  )
{
#if FW_PORT_TRACING == 1
  this->trace();
#endif

#if FW_PORT_SERIALIZATION
  FW_ASSERT(this->m_port || this->m_serPort);
#else
  FW_ASSERT(this->m_port);
#endif

  return this->m_port->invoke(e, eRef, a, aRef, s, sRef);
}
