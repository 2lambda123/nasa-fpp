#!/bin/sh

# ----------------------------------------------------------------------
# Compile ref C++ files, to check them for validity
#
# By default, each file is compiled with the default values of F Prime 
# guards found in fprime/config/FpConfig.h.
#
# If this script is run with the --all flag, each file is compiled with all
# possible combinations of values of F Prime guards with these exceptions:
# - FW_SERIALIZABLE_TO_STRING and FW_ARRAY_TO_STRING always have the same value
# - FW_PORT_SERIALIZATION is always on for components containing serial ports
# ----------------------------------------------------------------------

fprime_gcc=../../../../../scripts/fprime-gcc
export FPRIME_GCC_FLAGS="-I../../fprime"
warning_flags="-Wno-gnu-zero-variadic-macro-arguments -Wno-unused-parameter"
include_flags="-I../../../.. -I../impl -I.. -I$FPRIME/gtest/googletest-src/googletest/include"
define_flags="-DPROTECTED="public" -DPRIVATE="public" -DBUILD_UT=1"

all_flag=false
if [ "$1" = "--all" ]
then
  all_flag=true
fi

. ../generate_cpp.sh

# Find all guards used in generated component base class files
guards=`grep '#if FW_' *Ac.hpp *Ac.cpp | cut -f 2 -d ' ' | sort -u | sed 's/^/-D/g'`

compile_cpp() {
  files=$*

  echo "compiling $files"

  if [ "$all_flag" = true ]
  then
    for g in `python3 ../gen_guards.py $guards`
    do
      g=`echo $g | sed 's/,/ /g'`

      if grep -q -s static_assert $base'ComponentAc'.hpp
      then
        g=`echo $g | sed 's/FW_PORT_SERIALIZATION=0/FW_PORT_SERIALIZATION=1/g'`
      fi
      echo "compiling $files with $g"
      $fprime_gcc $include_flags -c $files $g $define_flags $warning_flags
     done
  else
    $fprime_gcc $include_flags -c $files $define_flags $warning_flags
  fi
}

# Compile type files
for fpp_type in Enum Array Struct Port
do
  for file in `find . -name "*${fpp_type}Ac.ref.cpp"`
  do
    base=`echo $file | sed 's;.ref.cpp;;'`
    cp $base.ref.hpp $base.hpp
    cp $base.ref.cpp $base.cpp
  done
  files="$base.cpp"
  
  compile_cpp $files
done

# Compile component files
for file in `find . -name '*ComponentAc.ref.cpp'`
do
  base=`echo $file | sed 's;ComponentAc.ref.cpp;;'`
  for base_suffix in ComponentAc TesterBase GTestBase
  do
    cp $base$base_suffix.ref.hpp $base$base_suffix.hpp
    cp $base$base_suffix.ref.cpp $base$base_suffix.cpp
  done
  files="${base}ComponentAc.cpp ${base}TesterBase.cpp ${base}GTestBase.cpp"

  compile_cpp $files
done
