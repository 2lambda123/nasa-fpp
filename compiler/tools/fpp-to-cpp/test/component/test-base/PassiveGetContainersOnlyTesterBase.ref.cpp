// ======================================================================
// \title  PassiveGetContainersOnlyTesterBase.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for PassiveGetContainersOnly component test harness base class
// ======================================================================

#include <cstdlib>
#include <cstring>

#include "test-base/PassiveGetContainersOnlyTesterBase.hpp"

// ----------------------------------------------------------------------
// Component initialization
// ----------------------------------------------------------------------

void PassiveGetContainersOnlyTesterBase ::
  init(NATIVE_INT_TYPE instance)
{
  // Initialize base class
  Fw::PassiveComponentBase::init(instance);

  // Connect input port productGetOut
  for (
    PlatformIntType port = 0;
    port < static_cast<PlatformIntType>(this->getNum_from_productGetOut());
    port++
  ) {
    this->m_from_productGetOut[port].init();
    this->m_from_productGetOut[port].addCallComp(
      this,
      from_productGetOut_static
    );
    this->m_from_productGetOut[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
    char portName[120];
    (void) snprintf(
      portName,
      sizeof(portName),
      "%s_from_productGetOut[%" PRI_PlatformIntType "]",
      this->m_objName,
      port
    );
    this->m_from_productGetOut[port].setObjName(portName);
#endif
  }

  // Connect input port productSendOut
  for (
    PlatformIntType port = 0;
    port < static_cast<PlatformIntType>(this->getNum_from_productSendOut());
    port++
  ) {
    this->m_from_productSendOut[port].init();
    this->m_from_productSendOut[port].addCallComp(
      this,
      from_productSendOut_static
    );
    this->m_from_productSendOut[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
    char portName[120];
    (void) snprintf(
      portName,
      sizeof(portName),
      "%s_from_productSendOut[%" PRI_PlatformIntType "]",
      this->m_objName,
      port
    );
    this->m_from_productSendOut[port].setObjName(portName);
#endif
  }

  // Connect input port timeGetOut
  for (
    PlatformIntType port = 0;
    port < static_cast<PlatformIntType>(this->getNum_from_timeGetOut());
    port++
  ) {
    this->m_from_timeGetOut[port].init();
    this->m_from_timeGetOut[port].addCallComp(
      this,
      from_timeGetOut_static
    );
    this->m_from_timeGetOut[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
    char portName[120];
    (void) snprintf(
      portName,
      sizeof(portName),
      "%s_from_timeGetOut[%" PRI_PlatformIntType "]",
      this->m_objName,
      port
    );
    this->m_from_timeGetOut[port].setObjName(portName);
#endif
  }
}

// ----------------------------------------------------------------------
// Getters for from ports
// ----------------------------------------------------------------------

Fw::InputDpGetPort* PassiveGetContainersOnlyTesterBase ::
  get_from_productGetOut(NATIVE_INT_TYPE portNum)
{
  FW_ASSERT(
    portNum < this->getNum_from_productGetOut(),
    static_cast<FwAssertArgType>(portNum)
  );

  return &this->m_from_productGetOut[portNum];
}

Fw::InputDpSendPort* PassiveGetContainersOnlyTesterBase ::
  get_from_productSendOut(NATIVE_INT_TYPE portNum)
{
  FW_ASSERT(
    portNum < this->getNum_from_productSendOut(),
    static_cast<FwAssertArgType>(portNum)
  );

  return &this->m_from_productSendOut[portNum];
}

Fw::InputTimePort* PassiveGetContainersOnlyTesterBase ::
  get_from_timeGetOut(NATIVE_INT_TYPE portNum)
{
  FW_ASSERT(
    portNum < this->getNum_from_timeGetOut(),
    static_cast<FwAssertArgType>(portNum)
  );

  return &this->m_from_timeGetOut[portNum];
}

// ----------------------------------------------------------------------
// Component construction and destruction
// ----------------------------------------------------------------------

PassiveGetContainersOnlyTesterBase ::
  PassiveGetContainersOnlyTesterBase(
      const char* const compName,
      const U32 maxHistorySize
  ) :
    Fw::PassiveComponentBase(compName)
{
  // Initialize data product histories
  this->productGetHistory = new History<DpGet>(maxHistorySize);
  this->productSendHistory = new History<DpSend>(maxHistorySize);

  // Clear history
  this->clearHistory();
}

PassiveGetContainersOnlyTesterBase ::
  ~PassiveGetContainersOnlyTesterBase()
{
  // Destroy product send history
  delete this->productSendHistory;
}

// ----------------------------------------------------------------------
// Getters for port counts
// ----------------------------------------------------------------------

NATIVE_INT_TYPE PassiveGetContainersOnlyTesterBase ::
  getNum_from_productGetOut() const
{
  return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_from_productGetOut));
}

NATIVE_INT_TYPE PassiveGetContainersOnlyTesterBase ::
  getNum_from_productSendOut() const
{
  return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_from_productSendOut));
}

NATIVE_INT_TYPE PassiveGetContainersOnlyTesterBase ::
  getNum_from_timeGetOut() const
{
  return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_from_timeGetOut));
}

// ----------------------------------------------------------------------
// Functions to test time
// ----------------------------------------------------------------------

void PassiveGetContainersOnlyTesterBase ::
  setTestTime(const Fw::Time& timeTag)
{
  this->m_testTime = timeTag;
}

// ----------------------------------------------------------------------
// Functions for testing data products
// ----------------------------------------------------------------------

void PassiveGetContainersOnlyTesterBase ::
  pushProductGetEntry(
      FwDpIdType id,
      FwSizeType size
  )
{
  DpGet e = { id, size };
  this->productGetHistory->push_back(e);
}

Fw::Success::T PassiveGetContainersOnlyTesterBase ::
  productGet_handler(
      FwDpIdType id,
      FwSizeType size,
      Fw::Buffer& buffer
  )
{
  (void) buffer;
  this->pushProductGetEntry(id, size);
  return Fw::Success::FAILURE;
}

void PassiveGetContainersOnlyTesterBase ::
  pushProductSendEntry(
      FwDpIdType id,
      const Fw::Buffer& buffer
  )
{
  DpSend e = { id, buffer };
  this->productSendHistory->push_back(e);
}

void PassiveGetContainersOnlyTesterBase ::
  productSend_handler(
      FwDpIdType id,
      const Fw::Buffer& buffer
  )
{
  this->pushProductSendEntry(id, buffer);
}

// ----------------------------------------------------------------------
// History functions
// ----------------------------------------------------------------------

void PassiveGetContainersOnlyTesterBase ::
  clearHistory()
{
  this->productGetHistory->clear();
  this->productSendHistory->clear();
}

// ----------------------------------------------------------------------
// Static functions for output ports
// ----------------------------------------------------------------------

Fw::Success PassiveGetContainersOnlyTesterBase ::
  from_productGetOut_static(
      Fw::PassiveComponentBase* const callComp,
      NATIVE_INT_TYPE portNum,
      FwDpIdType id,
      FwSizeType size,
      Fw::Buffer& buffer
  )
{
  PassiveGetContainersOnlyTesterBase* _testerBase = static_cast<PassiveGetContainersOnlyTesterBase*>(callComp);
  return _testerBase->productGet_handler(id, size, buffer);
}

void PassiveGetContainersOnlyTesterBase ::
  from_productSendOut_static(
      Fw::PassiveComponentBase* const callComp,
      NATIVE_INT_TYPE portNum,
      FwDpIdType id,
      const Fw::Buffer& buffer
  )
{
  PassiveGetContainersOnlyTesterBase* _testerBase = static_cast<PassiveGetContainersOnlyTesterBase*>(callComp);
  _testerBase->productSend_handler(id, buffer);
}

void PassiveGetContainersOnlyTesterBase ::
  from_timeGetOut_static(
      Fw::PassiveComponentBase* const callComp,
      NATIVE_INT_TYPE portNum,
      Fw::Time& time
  )
{
  PassiveGetContainersOnlyTesterBase* _testerBase = static_cast<PassiveGetContainersOnlyTesterBase*>(callComp);
  time = _testerBase->m_testTime;
}
