// ======================================================================
// \title  PassiveGetContainersOnlyGTestBase.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for PassiveGetContainersOnly component Google Test harness base class
// ======================================================================

#include "test-base/PassiveGetContainersOnlyGTestBase.hpp"

// ----------------------------------------------------------------------
// Construction and destruction
// ----------------------------------------------------------------------

PassiveGetContainersOnlyGTestBase ::
  PassiveGetContainersOnlyGTestBase(
      const char* const compName,
      const U32 maxHistorySize
  ) :
    PassiveGetContainersOnlyTesterBase(compName, maxHistorySize)
{

}

PassiveGetContainersOnlyGTestBase ::
  ~PassiveGetContainersOnlyGTestBase()
{

}

// ----------------------------------------------------------------------
// Data Product Get
// ----------------------------------------------------------------------

void PassiveGetContainersOnlyGTestBase ::
  assertProductGet_size(
      const char* const __callSiteFileName,
      const U32 __callSiteLineNumber,
      const U32 size
  ) const
{
  ASSERT_EQ(size, this->productGetHistory->size())
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Size of product get history\n"
    << "  Expected: " << size << "\n"
    << "  Actual:   " << this->productGetHistory->size() << "\n";
}

void PassiveGetContainersOnlyGTestBase ::
  assertProductGet(
      const char* const __callSiteFileName,
      const U32 __callSiteLineNumber,
      const U32 __index,
      FwDpIdType id,
      FwSizeType size
  ) const
{
  ASSERT_LT(__index, this->productGetHistory->size())
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Index into product get history\n"
    << "  Expected: Less than size of product get history ("
    << this->productGetHistory->size() << ")\n"
    << "  Actual:   " << __index << "\n";
  const DpGet& e = this->productGetHistory->at(__index);
  ASSERT_EQ(id, e.id)
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Id at index "
    << __index
    << " in product get history\n"
    << "  Expected: " << id << "\n"
    << "  Actual:   " << e.id << "\n";
  ASSERT_EQ(size, e.size)
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Size at index "
    << __index
    << " in product get history\n"
    << "  Expected: " << size << "\n"
    << "  Actual:   " << e.size << "\n";
}

// ----------------------------------------------------------------------
// Data Product Send
// ----------------------------------------------------------------------

void PassiveGetContainersOnlyGTestBase ::
  assertProductSend_size(
      const char* const __callSiteFileName,
      const U32 __callSiteLineNumber,
      const U32 size
  ) const
{
  ASSERT_EQ(size, this->productSendHistory->size())
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Size of product send history\n"
    << "  Expected: " << size << "\n"
    << "  Actual:   " << this->productSendHistory->size() << "\n";
}

void PassiveGetContainersOnlyGTestBase ::
  assertProductSend(
      const char* const __callSiteFileName,
      const U32 __callSiteLineNumber,
      const U32 __index,
      FwDpIdType id,
      FwDpPriorityType priority,
      const Fw::Time& timeTag,
      Fw::DpCfg::ProcType procType,
      const Fw::DpContainer::Header::UserData& userData,
      FwSizeType dataSize,
      Fw::Buffer& historyBuffer
  ) const
{
  ASSERT_LT(__index, this->productSendHistory->size())
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Index into product send history\n"
    << "  Expected: Less than size of product send history ("
    << this->productSendHistory->size() << ")\n"
    << "  Actual:   " << __index << "\n";
  const DpSend& e = this->productSendHistory->at(__index);
  // Set the history buffer output
  historyBuffer = e.buffer;
  // Check the container id
  ASSERT_EQ(e.id, id)
    << "\n"
    << __callSiteFileName << ":" << __callSiteLineNumber << "\n"
    << "  Value:    Container ID at index " << __index << " in product send history\n"
    << "  Expected: " << id << "\n"
    << "  Actual:   " << e.id << "\n";
  // Check the header
  Fw::TestUtil::DpContainerHeader header;
  header.deserialize(__callSiteFileName, __callSiteLineNumber, historyBuffer);
  header.check(
      __callSiteFileName,
      __callSiteLineNumber,
      historyBuffer,
      id,
      priority,
      timeTag,
      procType,
      userData,
      dataSize
  );
}
