// ======================================================================
// \title  PassiveGetRecordsOnlyGTestBase.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for PassiveGetRecordsOnly component Google Test harness base class
// ======================================================================

#ifndef PassiveGetRecordsOnlyGTestBase_HPP
#define PassiveGetRecordsOnlyGTestBase_HPP

#include "gtest/gtest.h"
#include "test-base/PassiveGetRecordsOnlyTesterBase.hpp"

// ----------------------------------------------------------------------
// Macros for product get assertions
// ----------------------------------------------------------------------

#define ASSERT_PRODUCT_GET_SIZE(size) \
  this->assertProductGet_size(__FILE__, __LINE__, size)

#define ASSERT_PRODUCT_GET(index, id, size) \
  this->assertProductGet(__FILE__, __LINE__, index, id, size)

// ----------------------------------------------------------------------
// Macros for product send assertions
// ----------------------------------------------------------------------

#define ASSERT_PRODUCT_SEND_SIZE(size) \
  this->assertProductSend_size(__FILE__, __LINE__, size)

#define ASSERT_PRODUCT_SEND(index, id, priority, timeTag, procType, userData, dataSize, buffer) \
    assertProductSend(__FILE__, __LINE__, index, id, priority, timeTag, procType, userData, dataSize, buffer)

//! \class PassiveGetRecordsOnlyGTestBase
//! \brief Auto-generated base for PassiveGetRecordsOnly component Google Test harness
class PassiveGetRecordsOnlyGTestBase :
  public PassiveGetRecordsOnlyTesterBase
{

  protected:

    // ----------------------------------------------------------------------
    // Construction and destruction
    // ----------------------------------------------------------------------

    //! Construct object PassiveGetRecordsOnlyGTestBase
    PassiveGetRecordsOnlyGTestBase(
        const char* const compName, //!< The component name
        const U32 maxHistorySize //!< The maximum size of each history
    );

    //! Destroy object PassiveGetRecordsOnlyGTestBase
    ~PassiveGetRecordsOnlyGTestBase();

  protected:

    // ----------------------------------------------------------------------
    // Data Product Get
    // ----------------------------------------------------------------------

    //! Assert size of product get history
    void assertProductGet_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Assert the product get history at index
    void assertProductGet(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        FwDpIdType id, //!< The container ID
        FwSizeType size //!< The size of the requested buffer
    ) const;

  protected:

    // ----------------------------------------------------------------------
    // Data Product Send
    // ----------------------------------------------------------------------

    //! Assert size of product send history
    void assertProductSend_size(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 size //!< The asserted size
    ) const;

    //! Assert the product send history at index
    //!
    //! This function sets the output buffer, deserializes and checks the
    //! data product header, and sets the deserialization pointer to the start
    //! of the data payload. User-written code can then check the data payload.
    void assertProductSend(
        const char* const __callSiteFileName, //!< The name of the file containing the call site
        const U32 __callSiteLineNumber, //!< The line number of the call site
        const U32 __index, //!< The index
        FwDpIdType id, //!< The expected container ID (input)
        FwDpPriorityType priority, //!< The expected priority (input)
        const Fw::Time& timeTag, //!< The expected time tag (input)
        Fw::DpCfg::ProcType procType, //!< The expected processing type (input)
        const Fw::DpContainer::Header::UserData& userData, //!< The expected user data (input)
        FwSizeType dataSize, //!< The expected data size (input)
        Fw::Buffer& historyBuffer //!< The buffer from the history (output)
    ) const;

};

#endif
