#!/bin/sh

. ../../../scripts/test-utils.sh

fpp_to_json=../../../bin/fpp-to-json


run_test()
{
  args=$1
  infile=$2
  if test -n "$3"
  then
    outfile=$3
  else
    outfile=$infile
  fi

  # Run fpp_to_json and concatenate the output files
  $fpp_to_json $args $infile.fpp 2>&1 | remove_path_prefix > $outfile.out.txt
  cat fpp-ast.json fpp-loc-map.json fpp-analysis.json >> $outfile.out.txt


  # Delete the JSON files
  rm fpp-ast.json fpp-loc-map.json fpp-analysis.json

  diff -u $outfile.ref.txt $outfile.out.txt > $outfile.diff.txt 2>&1
}


constants()
{
  run_test "" constants
}

modules()
{
  run_test "" modules
}

types()
{
  run_test "" types
}

enums()
{
  run_test "" enums
}

ports()
{
  run_test "" ports
}

simpleComponents()
{
  run_test "" simpleComponents
}

specialPorts()
{
  run_test "" specialPorts
}

internalPorts()
{
  run_test "" internalPorts
}

commands(){
  run_test "" commands
}

events(){
  run_test "" events
}

telemetry(){
  run_test "" telemetry
}

parameters(){
  run_test "" parameters
}

constTypesComponents(){
  run_test "" constTypesComponents
}

matchedPorts(){
  run_test "" matchedPorts
}

passiveComponent(){
  run_test "" passiveComponent
}

queuedComponets(){
  run_test "" queuedComponets
}

activeComponents(){
  run_test "" activeComponents
}

simpleTopology(){
  run_test "" simpleTopology
}

importedTopologies(){
  run_test "" importedTopologies
}

locationMapValidator(){
  outfile=$1

  # Run locationMapValidator.py and capture its output
  output=$(python3 python/locationMapValidator.py)
  exit_status=$?
  if [ $exit_status -eq 1 ]; then
    echo "$output" >&2
    return 1
  fi
}

tests="
constants
modules
types
enums
ports
simpleComponents
specialPorts
internalPorts
commands
events
telemetry
parameters
constTypesComponents
matchedPorts
passiveComponent
queuedComponets
activeComponents
simpleTopology
importedTopologies
locationMapValidator
"

run_suite $tests
