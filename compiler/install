#!/bin/sh -e

if test $# -gt 1
then
  echo 'usage: install dest-dir' 1>&2
  echo '       install' 1>&2
  exit 1
fi

if test -n "$1" 
then
  dest=$1
else
  dest=bin
fi

wd=`dirname $0`
cd $wd

dir=`dirname $dest`
dir=`cd $dir; pwd`
base=`basename $dest`
dest=$dir/$base

tools="
fpp-check
fpp-depend
fpp-filenames
fpp-format
fpp-syntax
fpp-from-xml
fpp-locate-defs
fpp-locate-uses
fpp-to-cpp
fpp-to-xml
"

commit=`git log | awk 'NR == 1 { print $2 }'`
util=lib/src/main/scala/util
echo "Updating commit to $commit"
sed -i.bak -e "s/val commit = .*/val commit = \"$commit\"/" \
  $util/Version.scala

echo "Building jar files"
# The --batch and -Dsbt.server.forcestart=true flags were added to get the
# build to work without user interaction in a Docker container. See
# https://github.com/sbt/sbt/issues/6101#issuecomment-924554619.
sbt --batch -Dsbt.server.forcestart=true assembly

echo "Restoring Version.scala"
cp $util/Version.scala.bak $util/Version.scala

mkdir -p $dest

echo "Installing tools at $dest"
for tool in $tools
do
  jar=`find tools/$tool -name "*$name*assembly*.jar"`
  cp $jar $dest/$tool.jar
  echo '#!/bin/sh

  java -jar '$dest'/'$tool'.jar $@' > $dest/$tool
  chmod +x $dest/$tool
done
